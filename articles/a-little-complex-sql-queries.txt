diffとpatch
2020-07-03

@p{カーネルのメーリングリストなどを読んでいると頻繁にdiffとpatchが登場するので慣れておく。}

@section{diff}

@p{diff自体はよく使うが、メーリングリストではそのパッチでの差分を出力形式の一つであるunified形式で送っている。diffにuオプションを追加すれば出力できるようで、例えば}
@blcode{
$ for i in {1..12}; do echo $i >> test1.txt; done;
$ cp test1.txt test2.txt
$ vim test2.txt
$ diff -u test1.txt test2.txt
--- test1.txt	2020-07-03 22:31:13.000000000 +0900
+++ test2.txt	2020-07-03 22:24:45.000000000 +0900
@@ -3,7 +3,8 @@
 3
 4
 5
-6
+6a
+6b
 7
 8
 9
}
@p{と出力される。}

@p{まず最初の二行}
@blcode{
--- test1.txt	2020-07-03 22:31:13.000000000 +0900
+++ test2.txt	2020-07-03 22:24:45.000000000 +0900
}
@p{はどのファイルの差分をいつ取ったかを表示してくれている。}

@p{その後の}
@blcode{
@@ -3,7 +3,8 @@
}
@p{は、調べると}
@blcode{
@@ -変更前のファイルにおける開始行,行数 +変更後のファイルにおける開始行,行数@@
}
@p{という形になっているらしく、変更前のファイルのこの領域が変更後のファイルのこの領域に該当するようになりますよ、ということを意味している様子。}

@p{最後は見た目明らかで}
@blcode{
...
-6
+6a
+6b
...
}
@p{消された行と追加された行を表している}

@section{patch}

@p{ついでなのでこのdiffに基づいたpatchも試してみた。patchをdiffコマンドで作ってみて}
@blcode{
$ diff -u test1.txt test2.txt > diff.patch
}
@p{そのpatchを実際に当ててみると確かに変更される。}
@blcode{
$ patch -u test1.txt < diff.patch
$ head -n 7 test1.txt | tail -n 2
6a
6b
}

@p{ちなみにdiffの開始行数などを適当にいじってやると}
@blcode{
$ vim diff.patch
$ head -n 3 diff.patch | tail -n 1
@@ -3,7 +3,10 @@
}
@p{patchを当てたときに失敗する}
@blcode{
$ cp /dev/null test1.txt
$ for i in {1..12}; do echo $i >> test1.txt; done;
$ patch test1.txt < diff.patch
patching file test1.txt
patch: **** malformed patch at line 12:
$ echo $?
2
}
