arrowのcmakeファイルを読む
2020-06-27

@p{arrowのcmakeファイルを読んで変数の依存関係をまとめてみる。}
@p{読む対象は今リリースされている中で一番最新のブランチ}
@ul{@a{Maint-0.17.x}{https://github.com/apache/arrow/tree/Maint-0.17.x}}
@p{で、とりあえず@incode{cpp/CMakeLists.txt}だけ読み進めることができれば十分。}

@mermaid{
graph LR
  
  %% どう入れるか
  %% https://github.com/apache/arrow/blob/maint-0.17.x/cpp/CMakeLists.txt#L357
  %% https://github.com/apache/arrow/blob/maint-0.17.x/cpp/CMakeLists.txt#L367
  %% https://github.com/apache/arrow/blob/maint-0.17.x/cpp/CMakeLists.txt#L379-L397
  %% https://github.com/apache/arrow/blob/maint-0.17.x/cpp/CMakeLists.txt#L490-L494
  %% https://github.com/apache/arrow/blob/maint-0.17.x/cpp/CMakeLists.txt#L689
  %% https://github.com/apache/arrow/blob/maint-0.17.x/cpp/CMakeLists.txt#L739-L743
  
  subgraph バージョン関連設定
    project[[project]] --> ARROW_BASE_VERSION
    arrow_VERSION_MAJOR --> project[[project]]
    arrow_VERSION_MINOR --> project[[project]]
    arrow_VERSION_PATCH --> project[[project]]
    ARROW_VERSION_MAJOR --> arrow_VERSION_MAJOR
    ARROW_VERSION_MINOR --> arrow_VERSION_MINOR
    ARROW_VERSION_PATCH --> arrow_VERSION_PATCH
    ARROW_SO_VERSION --> ARROW_VERSION_MAJOR & ARROW_VERSION_MINOR
    ARROW_FULL_SO_VERSION --> ARROW_SO_VERSION & ARROW_VERSION_PATCH
    ARROW_BASE_VERSION --> ARROW_VERSION
  end

  subgraph ビルド関連設定
    LOWERCASE_BUILD_TYPE --> CMAKE_BUILD_TYPE
    UPPERCASE_BUILD_TYPE --> CMAKE_BUILD_TYPE
    ARROW_SOURCE_DIR --> PROJECT_SOURCE_DIR
    ARROW_SOURCE_DIR --> PROJECT_BINARY_DIR
    BUILD_SUPPORT_DIR --> CMAKE_SOURCE_DIR
    CMAKE_INSTALL_LIBDIR --> GNUInstallDirs[[GNUInstallDirs]]
    PROJECT_NAME --> project[[project]]
    ARROW_CMAKE_INSTALL_DIR --> CMAKE_INSTALL_LIBDIR & PROJECT_NAME
    ARROW_DOC_DIR --> PROJECT_NAME
    CLANG_FORMAT_FOUND --> ClangTools[[ClangTools]]
    CLANG_FORMAT_BIN --> ClangTools[[ClangTools]]
  end
  
  subgraph オプション関連
    ARROW_USE_CCACHE --> DefineOptions[[DefineOptions]]
    CCACHE_FOUND --> ARROW_USE_CCACHE
    RULE_LAUNCH_COMPILE --> CCACHE_FOUND
    RULE_LAUNCH_LINK --> CCACHE_FOUND
    ARROW_OPTION_INSTALL --> DefineOptions[[DefineOptions]]
    CMAKE_SKIP_INSTALL_ALL_DEPENDENCY --> ARROW_OPTION_INSTALL
    INSTALL_IS_OPTIONAL --> ARROW_OPTION_INSTALL
    ARROW_BUILD_BENCHMARKS --> DefineOptions[[DefineOptions]]
    ARROW_BUILD_TESTS --> DefineOptions[[DefineOptions]]
    ARROW_BUILD_INTEGRATION --> DefineOptions[[DefineOptions]]
    ARROW_FUZZING --> DefineOptions[[DefineOptions]]
    ARROW_JSON --> ARROW_BUILD_BENCHMARKS & ARROW_BUILD_TESTS & ARROW_BUILD_INTEGRATION &  ARROW_FUZZING & ARROW_PYTHON
    ARROW_CUDA --> DefineOptions[[DefineOptions]]
    ARROW_FLIGHT --> DefineOptions[[DefineOptions]]
    ARROW_PARQUET --> DefineOptions[[DefineOptions]]
    ARROW_IPC --> ARROW_CUDA & ARROW_FLIGHT & ARROW_PARQUET & ARROW_BUILD_TESTS
    ARROW_DATASET --> DefineOptions[[DefineOptions]] & ARROW_PYTHON
    ARROW_PYTHON --> DefineOptions[[DefineOptions]]
    ARROW_COMPUTE --> ARROW_DATASET & ARROW_PARQUET & ARROW_PYTHON
    ARROW_FILESYSTEM --> ARROW_DATASET & ARROW_PYTHON
    ARROW_CSV --> ARROW_PYTHON
    ARROW_HDFS --> ARROW_PYTHON
    ARROW_ORC --> MSVC
    ARROW_USE_GLOG --> MSVC
    ARROW_JNI --> DefineOptions[[DefineOptions]]
    ARROW_BUILD_STATIC --> ARROW_JNI
    ARROW_WITH_LZ4 --> ARROW_ORC
    ARROW_WITH_SNAPPY --> ARROW_ORC
    ARROW_WITH_ZLIB --> ARROW_ORC
    ARROW_WITH_ZSTD --> ARROW_ORC
    NO_TEST --> ARROW_BUILD_TESTS
    unittest([unittest]) --> all-tests([all-tests])
    ARROW_BUILD_BENCHMARKS --> DefineOptions[[DefineOptions]]
    NO_BENCHMARKS --> ARROW_BUILD_BENCHMARKS
    benchmark([benchmark]) --> all-benchmark([all-benchmark])
    ARROW_BUILD_EXAMPLES --> DefineOptions[[DefineOptions]]
    NO_EXAMPLES --> ARROW_BUILD_EXAMPLES
    NO_FUZZING --> ARROW_FUZZING
    PYTHON_EXECUTABLE --> CMAKE_VERSION
  end
  
  subgraph 開発コマンド関連
    ARROW_VERBOSE_LINT --> DefineOptions[[DefineOptions]]
    ARROW_LINT_QUIET --> ARROW_VERBOSE_LINT
    LINT_EXCLUSIONS_FILE --> BUILD_SUPPORT_DIR
    CPPLINT_BIN --> BUILD_SUPPORT_DIR
    lint([lint]) --> PYTHON_EXECUTABLE & BUILD_SUPPORT_DIR & CPPLINT_BIN & LINT_EXCLUSIONS_FILE & CMAKE_CURRENT_SOURCE_DIR & ARROW_LINT_QUIET
    format([format]) --> CLANG_FORMAT_FOUND & PYTHON_EXECUTABLE & BUILD_SUPPORT_DIR & CLANG_FORMAT_BIN & LINT_EXCLUSIONS_FILE & CMAKE_CURRENT_SOURCE_DIR & ARROW_LINT_QUIET
    check-format([check-format]) --> CLANG_FORMAT_FOUND & PYTHON_EXECUTABLE & BUILD_SUPPORT_DIR & CLANG_FORMAT_BIN & LINT_EXCLUSIONS_FILE & CMAKE_CURRENT_SOURCE_DIR & ARROW_LINT_QUIET
    lint_cpp_cli([lint_cpp_cli]) --> PYTHON_EXECUTABLE & BUILD_SUPPORT_DIR & CMAKE_CURRENT_SOURCE_DIR
    clang-tidy([clang-tidy]) --> CLANG_FORMAT_FOUND & PYTHON_EXECUTABLE & BUILD_SUPPORT_DIR & CLANG_TIDY_BIN & LINT_EXCLUSIONS_FILE & CMAKE_BINARY_DIR & CMAKE_CURRENT_SOURCE_DIR & ARROW_LINT_QUIET
    check-clang-tidy([check-clang-tidy]) --> CLANG_FORMAT_FOUND & PYTHON_EXECUTABLE & BUILD_SUPPORT_DIR & CLANG_TIDY_BIN & LINT_EXCLUSIONS_FILE & CMAKE_BINARY_DIR & CMAKE_CURRENT_SOURCE_DIR & ARROW_LINT_QUIET
    iwyu([iwyu]) --> UNIX & BUILD_SUPPORT_DIR
    iwyu-all([iwyu-all]) --> UNIX & BUILD_SUPPORT_DIR
    INFER_BIN --> InferTools[[InferTools]]
    INFER_FOUND --> InferTools[[InferTools]]
    infer([infer]) --> INFER_FOUND & BUILD_SUPPORT_DIR & INFER_BIN & CMAKE_BINARY_DIR
    infer-analyze([infer-analyze]) --> INFER_FOUND & BUILD_SUPPORT_DIR & INFER_BIN & CMAKE_BINARY_DIR
    infer-report([infer-report]) --> INFER_FOUND & BUILD_SUPPORT_DIR & INFER_BIN & CMAKE_BINARY_DIR
  end
  
  subgraph ビルド先のディレクトリ確保
    BUILD_SUBDIR_NAME --> CMAKE_BUILD_TYPE
    BUILD_OUTPUT_ROOT_DIRECTORY --> CMAKE_CURRENT_BINARY_DIR & BUILD_SUBDIR_NAME
    CMAKE_ARCHIVE_OUTPUT_DIRECTORY --> BUILD_OUTPUT_ROOT_DIRECTORY
    ARCHIVE_OUTPUT_DIRECTORY --> BUILD_OUTPUT_ROOT_DIRECTORY
    CMAKE_LIBRARY_OUTPUT_DIRECTORY --> BUILD_OUTPUT_ROOT_DIRECTORY
    LIBRARY_OUTPUT_DIRECTORY --> BUILD_OUTPUT_ROOT_DIRECTORY
    EXECUTABLE_OUTPUT_PATH --> BUILD_OUTPUT_ROOT_DIRECTORY
  end
  
  subgraph コンパイル時の設定
    CXX_COMMON_FLAGS --> SetupCxxFlags[[SetupCxxFlags]]
    ARROW_CXXFLAGS --> DefineOptions[[DefineOptions]]
    CMAKE_CXX_FLAGS --> CXX_COMMON_FLAGS & ARROW_CXXFLAGS & CXX_ONLY_FLAGS & ARROW_GENERATE_COVERAGE
    CMAKE_C_FLAGS --> CXX_COMMON_FLAGS & ARROW_GENERATE_COVERAGE
    CXX_ONLY_FLAGS --> SetupCxxFlags[[SetupCxxFlags]]
    ARROW_GENERATE_COVERAGE --> DefineOptions[[DefineOptions]]
  end
  
  subgraph 依存ライブラリの設定
    ARROW_USE_OPENSSL --> DefineOptions[[DefineOptions]]
    ARROW_OPENSSL_LIBS --> ARROW_USE_OPENSSL
    ARROW_LINK_LIBS --> ARROW_OPENSSL_LIBS
    ARROW_STATIC_LINK_LIBS --> ARROW_OPENSSL_LIBS
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_OPENSSL_LIBS
    ARROW_WITH_BROTLI --> DefineOptions[[DefineOptions]]
    ARROW_BROTLI_LIBS --> ARROW_USE_BROTLI
    ARROW_LINK_LIBS --> ARROW_BROTLI_LIBS
    ARROW_STATIC_LINK_LIBS --> ARROW_BROTLI_LIBS
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_BROTLI_LIBS
    ARROW_WITH_BZ2--> DefineOptions[[DefineOptions]]
    ARROW_STATIC_LINK_LIBS --> ARROW_WITH_BZ2
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_WITH_BZ2
    ARROW_WITH_LZ4--> DefineOptions[[DefineOptions]]
    ARROW_STATIC_LINK_LIBS --> ARROW_WITH_LZ4
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_WITH_LZ4
    ARROW_WITH_SNAPPY--> DefineOptions[[DefineOptions]]
    ARROW_STATIC_LINK_LIBS --> ARROW_WITH_SNAPPY
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_WITH_SNAPPY
    ARROW_WITH_ZLIB--> DefineOptions[[DefineOptions]]
    ARROW_STATIC_LINK_LIBS --> ARROW_WITH_ZLIB
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_WITH_ZLIB
    ARROW_WITH_ZSTD--> DefineOptions[[DefineOptions]]
    ARROW_STATIC_LINK_LIBS --> ARROW_WITH_ZSTD
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_WITH_ZSTD
    ARROW_PROTOBUF_LIBPROTOBUF --> ThirdpartyToolchain[[ThirdpartyToolchain]]
    ARROW_LINK_LIBS --> ARROW_ORC & ARROW_PROTOBUF_LIBPROTOBUF
    ARROW_STATIC_LINK_LIBS --> ARROW_ORC & ARROW_PROTOBUF_LIBPROTOBUF & ARROW_SYSTEM_LINK_LIBS
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_ORC & ARROW_PROTOBUF_LIBPROTOBUF
    ARROW_USE_GLOG --> DefineOptions[[DefineOptions]]
    ARROW_LINK_LIBS --> ARROW_USE_GLOG
    ARROW_STATIC_LINK_LIBS --> ARROW_USE_GLOG
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_USE_GLOG
    ARROW_S3 --> DefineOptions[[DefineOptions]]
    AWSSDK_LINK_LIBRARIES --> ThirdpartyToolchain[[ThirdpartyToolchain]]
    ARROW_LINK_LIBS --> ARROW_S3 & AWSSDK_LINK_LIBRARIES
    toolchain --> ThirdpartyToolchain[[ThirdpartyToolchain]]
    arrow_dependencies([arrow_dependencies]) --> toolchain
    toolchain-tests --> ThirdpartyToolchain[[ThirdpartyToolchain]]
    arrow_dependencies([arrow_test_dependencies]) --> toolchain-tests
    arrow_dependencies([arrow_dependencies]) --> ARROW_STATIC_LINK_LIBS
    ARROW_SHARED_PRIVATE_LINK_LIBS --> ARROW_STATIC_LINK_LIBS
    BOOST_FILESYSTEM_LIBRARY --> ThirdpartyToolchain[[ThirdpartyToolchain]]
    BOOST_SYSTEM_LIBRARY --> ThirdpartyToolchain[[ThirdpartyToolchain]]
    ARROW_TEST_LINK_LIBS --> ARROW_FLIGHT & ARROW_S3 & &ARROW_BUILD_TESTS & ARROW_BUILD_INTEGRATION & BOOST_FILESYSTEM_LIBRARY & BOOST_SYSTEM_LIBRARY
    ARROW_LINKS_LIBS --> MSVC & CMAKE_DL_LIBS & ARROW_SYSTEM_LINK_LIBS
    ARROW_SHARED_INSTALL_INTERFACE_LIBS --> MSVC & CMAKE_DL_LIBS
    ARROW_TEST_LINK_TOOLCHAIN --> BOOST_FILESYSTEM_LIBRARY & BOOST_SYSTEM_LIBRARY
    arrow_test_dependencies([arrow_test_dependencies]) --> ARROW_BUILD_TESTS & ARROW_TEST_LINK_TOOLCHAIN
    arrow_benchmark_dependencies([arrow_benchmark_dependencies]) --> ARROW_BUILD_BENCHMARKS & arrow_test_dependencies & toolchain-benchmarks
    ARROW_TEST_STATIC_LINK_LIBS --> ARROW_LINK_LIBS & ARROW_TEST_LINK_TOOLCHAIN
    ARROW_TEST_SHARED_LINK_LIBS --> ARROW_LINK_LIBS & ARROW_TEST_LINK_TOOLCHAIN & CMAKE_DL_LIBS
    ARROW_JEMALLOC --> DefineOptions[[DefineOptions]]
    ARROW_SYSTEM_LINK_LIBS --> ARROW_JEMALLOC & ARROW_MIMALLOC
    ARROW_STATIC_INSTALL_INTERFACE_LIBS --> ARROW_SYSTEM_LINK_LIBS
  end
}

@p{比較的長大なグラフになった上に項目数が多すぎてよくわからない。生成するなら自動生成を目指すべきかもしれないし、理解するためなら別の方法を探った方がいいかもしれない。}
