Rust(1987)のデータを再現する
2020-11-23

@p{動的離散選択モデルの構造推定を扱った次の論文}
@ul{J. Rust (1987), Optimal Replacement of GMC Bus Engines, Econometrica}
@p{の再現を行いたいが、データが手に入らないので、まずはそのデータをシミュレーションで再現してみる。この論文の概要とそこで紹介されているNFXPアルゴリズムについては次の記事を参考にしてほしい。}
@ul{@a{NFXPアルゴリズムの簡単な応用例}{@rel{/build/a-simple-application-of-nfxp-algorithm.html}}}

@section{論文で使われているデータの詳細}

@p{対象のバス会社からは色々とメンテナンスに関するデータをもらったようだが、論文から読み取れる限りでは、主に次の形式のデータを使用していたのだろうと推測できる。}
@table
  {列名,説明,備考}
  {年月,そのデータを取得した年月,10年分のデータ(120点)を入手した様子}
  {バス種別,バスの型や製造メーカーなどの情報,種別の詳細情報は特に使われない}
  {バスID,バスそれぞれの固有ID,明示はされていないが通常はあるはず}
  {走行距離,最後にエンジンを変えてからの累積走行距離,単位はマイル}
  {エンジン交換,エンジン交換をしたら1でしなかったら0,一月に2回以上交換する事はないと仮定}
@p{このようなデータの記述統計を計算しているのが論文の2章である。そこでは図や表ごとに次のような集計がなされている。}
@table
  {図表,説明}
  {Table1,バス種別ごとのバスの台数}
  {Table2a,一度でもエンジン交換を行ったバスのバス種別ごとのエンジン交換間隔とその間の走行距離の平均}
  {Table2b,一度もエンジン交換を行なっていないバスの乗車時間と走行距離の平均}
  {Figure1,Table2aと2bのデータのプロット}
@p{大体の数値の感覚としては}
@table
  {内容,スケール}
  {年月,10年分12ヶ月より120点}
  {対象の全バスの台数,162台(Table1より)}
  {全データ点,@inmath{120 \times 162 = 19440}点程度}
  {エンジン交換間隔,5年程度(Table2aより)}
  {エンジン交換までの走行距離,20万マイル程度(Table2aより)}
@p{となっている。普通の車は@a{30万km程度まで走れる}{https://www.webcartop.jp/2016/10/51860/}らしいので、大体スケールとしては今の普通の車の感覚と一致するようだ。全データ点は@inmath{19440}とかなり多いが、この後の分析では大抵一部のバスの種類のみを対象にして分析を行っているので、そこまでのデータ点は使用していない。}


@section{データの生成方法}

@p{この論文では推定結果の妥当性を確保するために、様々な条件のもとでNFXPアルゴリズムを適用してパラメータの推定を行なっている。主に変更しているのは以下の3つの点である。}
@ul
  {どのバスの種別を対象とするか}
  {割引率@inmath{\beta}の値}
  {通常メンテナンスのコスト関数@inmath{c}の形}
  {エンジンを変えた後の総走行距離@inmath{x}の離散化粒度}
  {遷移確率@inmath{p}の離散化粒度}
@p{今回は次の文献}
@ul{@a{経済分析のための構造推定アルゴリズム}{https://www.amazon.co.jp/dp/4866931418}、楠田康之}
@p{での再現と同じく、論文のTable10で紹介されている次の内容の推定結果を使ってデータを再現することにする。}
@ul
  {対象のバス種別は種別1,2,3}
  {割引率@inmath{\beta}の値は@inmath{0.9999}を想定}
  {通常メンテナンスのコスト関数は線形(@inmath{c(x)=0.001\theta_{11}x})を仮定}
  {総走行距離はデータで観察された最大値よりも少し大きい45万マイルを175等分する}
  {遷移確率は上の離散化された距離で@inmath{0,1,2,3}個分だけ走行する可能性があると仮定}

@p{これらの仮定とTable10の値をあわせれば、効用は次のような式となり}
@blmath{
u(x, i) = \begin{cases}
  - 11.7257 & i = 1 \\
  - 0.0024569x & i = 0
\end{cases}
}
@p{遷移確率はまず区間@inmath{x_k}を}
@blmath{\begin{cases}
x_k = [ \frac{450000}{175} k, \frac{450000}{175} (k+1)) & k = 0,1,\cdots,174 \\
x_k = [450000, \infty) & k = 175
\end{cases}}
@p{と分割すれば、次のような式で表されることがわかる。}
@blmath{
p(x_k | x_l, i) = \begin{cases}
  g(k - 0) & i = 1 \\
  g(k - l) & i = 0
\end{cases}
}
@p{ただだしここで確率分布@inmath{g}は}
@blmath{
g(n) = \begin{cases}
  0.0937 & n = 0 \\
  0.4475 & n = 1 \\
  0.4459 & n = 2 \\
  0.0127 & n = 3 \\
  0.0000 & \textrm{otherwise}
\end{cases}
}
@p{となる。ただしここで@inmath{l=175}の場合などそれ以上値が大きくならない場合には、@inmath{x_{175}}を吸収状態とするような遷移確率によしなに変更しておく。}

@p{効用関数と遷移確率が定まれば整備工の最適方策を次のように計算することができる。まずは期待価値関数をつぎの再帰的な式の不動点を求めることで得ることができる。}
@blmath{
EV(x_k) = \ln \left[ \sum_{i=0,1} \exp(u(x_k,i) + \beta \sum_{l=0}^{175} p(x_l | x_k, i) EV(x_l)) \right]
}
@p{ただしここで効用@inmath{u(x_k,i)}の計算は、区間@inmath{x_k}の最小値@inmath{450000/175k}で代替して計算することにする。そこで得られた期待方策を用いて方策を}
@blmath{
P(i|x_k) = \frac{\exp(u(x_k, i)) + \beta \sum_{l=0}^{175} p(x_l | x_k, i) EV(x_l)}{\sum_{i=0,1} \exp(u(x_k, i)) + \beta \sum_{l=0}^{175} p(x_l | x_k, i) EV(x_l)}
}
@p{と計算できる。これと遷移確率を用いて次の確率分布に従ってデータ@inmath{\{x_t, i_t\}_{t=1}^{120}}を生成することができる。}
@blmath{
p(\{x_t, i_t\}_{t=1}^{120}) = \prod_{t=1}^{120} P(i_t | x_t) p(x_{t+1} | x_t, i_t)
}


@section{データの生成}

@p{実際にこの方法によってデータを生成するコードをpythonで実装した}
@ul{@a{Rust1987の再現データの生成}{https://gist.github.com/Ktakuya332C/18af4faafd1e0946c1230b6d90cf40bf}}

@p{いくつかの視点から生成したデータを眺めてみる。まずは記述統計をひと取り計算する。}
@blcode{
> library(tidyverse)
> data <- read_csv('data.csv')
> summary(data)
     ep_id          t                x               i
 Min.   : 0   Min.   :  0.00   Min.   : 0.00   Min.   :0.00000
 1st Qu.:16   1st Qu.: 29.75   1st Qu.: 8.00   1st Qu.:0.00000
 Median :32   Median : 59.50   Median :16.00   Median :0.00000
 Mean   :32   Mean   : 59.50   Mean   :15.97   Mean   :0.03974
 3rd Qu.:48   3rd Qu.: 89.25   3rd Qu.:24.00   3rd Qu.:0.00000
 Max.   :64   Max.   :119.00   Max.   :34.00   Max.   :1.00000
}
@p{エンジンを変えた後の走行距離の最大値が@inmath{34}となっているので、その分布を計算してみる。}
@blcode{
> library(tidyverse)
> data <- read_csv('data.csv')
> data %>% filter(i==1) %>% group_by(x) %>% summarise(n=n())
      x     n
  <dbl> <int>
1    31    61
2    32   175
3    33    71
4    34     3
}
@p{ある程度小さい範囲の値に固まっているようなので、整備工は@inmath{450000/175 \approx 2571}より、@inmath{34 \times 2751 = 93534}マイル(だいたい15万km)程度走ったらエンジンを替えるという方策をとっているように解釈できるデータに見える。}
